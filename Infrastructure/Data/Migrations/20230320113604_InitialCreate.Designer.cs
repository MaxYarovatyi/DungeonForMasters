// <auto-generated />
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace infrastructure.Data.Migrations
{
    [DbContext(typeof(SiteContext))]
    [Migration("20230320113604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Core.Entities.AbilityScores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Charisma")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Constitution")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Dexterity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intelligence")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Wisdom")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("AbilityScores");
                });

            modelBuilder.Entity("Core.Entities.CharacterClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CharacterClasses");
                });

            modelBuilder.Entity("Core.Entities.CharacterRace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CharacterRaces");
                });

            modelBuilder.Entity("Core.Entities.CharacterSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AbilityScoresId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alignment")
                        .HasColumnType("TEXT");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Background")
                        .HasColumnType("TEXT");

                    b.Property<int>("CharClassId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CharName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("CharRaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpiriencePoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Initiative")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModificatorsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlayerName")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<int>("SkillsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AbilityScoresId");

                    b.HasIndex("CharClassId");

                    b.HasIndex("CharRaceId");

                    b.HasIndex("ModificatorsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("CharacterSheets");
                });

            modelBuilder.Entity("Core.Entities.Modificators", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharismaModificator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConstitutionModificator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DexterityModificator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntelligenceModificator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StrengthModificator")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WisdomModificator")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Modificators");
                });

            modelBuilder.Entity("Core.Entities.SkillList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Acrobatics")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AnimalHandling")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Arcana")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Athletics")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Deception")
                        .HasColumnType("INTEGER");

                    b.Property<int>("History")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Insight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Intimidation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Investigation")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Medicine")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Nature")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Perception")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Performance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Persuasion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Religion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SleightOfHand")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Stealth")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Survival")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("CharacterSkills");
                });

            modelBuilder.Entity("Core.Entities.CharacterSheet", b =>
                {
                    b.HasOne("Core.Entities.AbilityScores", "AbilityScores")
                        .WithMany()
                        .HasForeignKey("AbilityScoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.CharacterClass", "CharClass")
                        .WithMany()
                        .HasForeignKey("CharClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.CharacterRace", "CharRace")
                        .WithMany()
                        .HasForeignKey("CharRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Modificators", "Modificators")
                        .WithMany()
                        .HasForeignKey("ModificatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.SkillList", "Skills")
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbilityScores");

                    b.Navigation("CharClass");

                    b.Navigation("CharRace");

                    b.Navigation("Modificators");

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
